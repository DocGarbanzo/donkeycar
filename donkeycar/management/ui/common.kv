#:import platform sys.platform

#:set common_height 30
#:set layout_pad_x 10
#:set layout_height common_height + layout_pad_x
#:set layout_height_double 2 * common_height + layout_pad_x
#:set layout_pad_xy [layout_pad_x, layout_pad_x // 2]

#:set font_size_14 '14sp'
#:set font_size_12 '12sp'


#:set font_color 0.8, 0.9, 0.9, 1

# Define your background color Template

<RoundedButton@Button>:
    background_color: 0,0,0,0  # the last zero is the critical on, make invisible
    canvas.before:
        Color:
            rgba: (.3,.3,.3,1) if self.state=='normal' else (0.2, 0.6,.8,1)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [10,]
    color: font_color


<RoundedToggleButton@ToggleButton>:
    background_color: 0,0,0,0  # the last zero is the critical on, make invisible
    canvas.before:
        Color:
            rgba: (.3,.3,.3,1) if self.state=='normal' else (0.2, 0.6,.8,1)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [10,]
    color: font_color


<BackgroundColor>
    background_color: 1, 1, 1, 1
    canvas.before:
        Color:
            rgba: root.background_color
        Rectangle:
            size: self.size
            pos: self.pos


<BackgroundBoxLayout>
    background_color: 0,0,0,0  # the last zero is the critical on, make invisible
    padding: 10
    spacing: 5
    canvas.before:
        Color:
            rgba: 0.10, 0.11, 0.12, 1
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [10,]


<MyLabel@Label>:
    halign: 'left'
    valign: 'top'
    color: font_color
    text_size: self.size


<AutoLabel@Label>
    halign: 'center'
    valign: 'middle'
    color: font_color
    text_size: self.size


<Header>
    MyLabel:
        font_size: '20sp'
        text: root.title
    MyLabel:
        font_size: '13sp'
        text: root.description


<PaddedBoxLayout>:
    size_hint_y: None
    height: layout_height
    padding: layout_pad_xy
    spacing: layout_pad_x


<StatusLabel@MyLabel>:
    size_hint_y: None
    height: 20
    text_size: self.size
    halign: 'left'
    valign: 'bottom'
    text: 'Donkey ready'


<StatusBar>
    size_hint_y: None
    height: 20
    MyLabel:
        valign: 'bottom'
        font_size: '12sp'
        color: 0.6, 0.6, 0, 1
        text: root.text


<MySpinnerOption>:
    text_size: self.size
    halign: 'center'
    valign: 'middle'
    height: common_height
    background_color: 0,0,0,0  # the last zero is the critical on, make invisible
    canvas.before:
        Color:
            rgba: (.3,.3,.3,1) if self.state=='normal' else (0.2, 0.6,.8,1)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [10,]
    color: font_color

<MySpinner>:
    text_size: self.size
    halign: 'center'
    valign: 'middle'
    height: common_height
    background_color: 0,0,0,0  # the last zero is the critical on, make invisible
    canvas.before:
        Color:
            rgba: (.3,.3,.3,1) if self.state=='normal' else (0.2, 0.6,.8,1)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [10,]
    color: font_color


<FileChooserPopup>:
    title: "Choose the directory"
    size_hint: 1.0, 1.0
    auto_dismiss: False
    pos_hint: {'center_x': .5, 'center_y': .5}

    BoxLayout:
        orientation: "vertical"
        FileChooser:
            id: file_chooser
            rootpath: root.root_path
            dirselect: True
            filter_dirs: True
            filters: root.filters
            FileChooserListLayout

        BoxLayout:
            size_hint: (1, 0.1)
            pos_hint: {'center_x': .5, 'center_y': .5}
            spacing: 20
            Button:
                text: "Cancel"
                on_release: root.dismiss()
            Button:
                text: "Load"
                on_release: root.load(file_chooser.selection)
                disabled: file_chooser.selection==[]


<LabelBar>:
    orientation: 'horizontal'
    spacing: 4
    Label:
        id: field_label
        text_size: self.size
        halign: 'left'
        valign: 'middle'
        font_size: '14sp'
        canvas.before:
            Color:
                rgba: 0.17, 0.18, 0.25, 1
            Rectangle:
                pos: self.pos
                size: self.size
    Label:
        id: value_label
        text_size: self.size
        halign: 'right'
        valign: 'middle'
        font_size: '14sp'
        size_hint_x: 0.8
        padding_x: 10
        canvas.before:
            Color:
                rgba: 0.14, 0.15, 0.22, 1
            Rectangle:
                pos: self.pos
                size: self.size
    ProgressBar:
        id: bar
        canvas.before:
            Color:
                rgba: 0.12, 0.13, 0.20, 1
            Rectangle:
                pos: self.pos
                size: self.size

<-FullImage>:
    size_hint_x: 1.2
    size_hint_y: 1.2
    canvas:
        Color:
            rgb: (1, 1, 1)
        Rectangle:
            texture: self.texture
            size: self.width, self.height / 1.2
            pos: self.x, self.y


<DataPanel>
    orientation: 'vertical'
    GridLayout:
        cols: 2
        MyLabel:
            text: 'Record field'
            size_hint_y: None
            height: common_height
        MySpinner:
            id: data_spinner
            size_hint_y: None
            height: common_height
            text: root.auto_text if root.link else 'Add/remove'
            on_text: root.add_remove()
            on_values: root.clear()


<ControlPanel>
    orientation: 'vertical'
    spacing: 10
    GridLayout:
        spacing: 10
        cols: 2
        MyLabel:
            id: record_num
            text: root.record_display
        MySpinner:
            id: control_spinner
            pos_hint: {'center': (.5, .5)}
            text: '1.00'
            values: ['0.25', '0.50', '1.00', '1.50', '2.00', '3.00', '4.00']
            on_text:
                root.speed = float(self.text)
                app.root.ids.status.text = f'Setting speed to '\
                f'{self.text} - you can also use the <up>/<down> keys.'
                root.restart()
        RoundedButton:
            id: step_bwd
            text: '<'
            on_press:
                root.start(fwd=False)
            on_release:
                root.stop()
        RoundedButton:
            id: step_fwd
            text: '>'
            on_press:
                root.start(fwd=True)
            on_release:
                root.stop()
        RoundedButton:
            id: run_bwd
            text: '<<'
            on_press:
                root.start(fwd=False, continuous=True)
                root.set_button_status(disabled=True)
        RoundedButton:
            id: run_fwd
            text: '>>'
            on_press:
                root.start(fwd=True, continuous=True)
                root.set_button_status(disabled=True)
    RoundedButton:
        size_hint_y: 0.3
        text: 'Stop'
        on_press:
            root.stop()
            root.set_button_status(disabled=False)